"use strict";const path = require('path');
const filesystem = require('fs');
const url = require('url');
const redbird = require('redbird');
const config = require('../../setup/configuration/configuration.js');
const retrieveWebappProxyConfig = require('./retrieveWebappProxyConfig.js');

module.exports = function () {


  const proxy = redbird({
    port: 80,
    xfwd: true,




    ssl: {
      port: 443,




      redirect: true } });




  proxy.notFound((req, res) => {
    if (req.headers.host.slice(0, 4) === 'www.') {
      let parsedRequest = url.parse(req.url);
      let newHost = req.headers.host.slice(4);
      let newLocation = `${parsedRequest.protocol || 'http'}://${newHost}${parsedRequest.path || '/'}`;
      console.log(`• Redicrecting www to: ${newLocation}`);
      res.writeHead(301, { 'Location': newLocation });
      res.end('Redirecting...');
    } else {
      res.statusCode = 404;
      res.write('Oops.. No app found to handle your request.');
      res.end();
    }
  });


  retrieveWebappProxyConfig().
  then(function () {

    filesystem.readdirSync(config.proxyFolderPath).forEach(function (file) {
      if (file.substr(file.lastIndexOf('.') + 1)) {
        let filePath = path.join(config.proxyFolderPath, file);
        let func;
        try {
          func = require(filePath);
        } catch (error) {
          throw error;
        }
        console.log(`\n\n\n\n• Adding ${filePath} to proxy.`);
        console.log(func);
        let proxyConfigArray = func();
        proxyConfigArray.forEach(function (proxyConfig) {
          registerProxyConfig(proxyConfig);
        });
      }
    });
  });

  function registerProxyConfig(proxyConfig) {
    if (proxyConfig.ssl) {
      let hostname = proxyConfig.subdomain ? `${proxyConfig.subdomain}.${proxyConfig.domain}` : proxyConfig.domain;
      let certificateFolder = path.join(config.certificateBaseFolder, proxyConfig.domain);
      proxy.register(
      hostname,
      proxyConfig.containerRoute,
      {
        ssl: {

          key: path.join(certificateFolder, 'privkey.pem'),
          cert: path.join(certificateFolder, 'fullchain.pem') } });



    } else {
      let hostname = proxyConfig.subdomain ? `${proxyConfig.subdomain}.${proxyConfig.domain}` : proxyConfig.domain;
      proxy.register(
      hostname,
      proxyConfig.containerRoute);

    }
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,